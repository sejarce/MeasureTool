// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YZMFile.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "YZMFile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yzm {
class YZMFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YZMFile> {
} _YZMFile_default_instance_;

namespace protobuf_YZMFile_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YZMFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YZMFile, document_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YZMFile, point_cloud_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(YZMFile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_YZMFile_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "YZMFile.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _YZMFile_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::yzm::protobuf_YZMMeasureDocument_2eproto::InitDefaults();
  ::yzm::protobuf_YZMPointCloud_2eproto::InitDefaults();
  _YZMFile_default_instance_.DefaultConstruct();
  _YZMFile_default_instance_.get_mutable()->document_ = const_cast< ::yzm::MeasureDocument*>(
      ::yzm::MeasureDocument::internal_default_instance());
  _YZMFile_default_instance_.get_mutable()->point_cloud_ = const_cast< ::yzm::PointCloud*>(
      ::yzm::PointCloud::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rYZMFile.proto\022\003yzm\032\030YZMMeasureDocument"
      ".proto\032\023YZMPointCloud.proto\"W\n\007YZMFile\022&"
      "\n\010document\030\001 \001(\0132\024.yzm.MeasureDocument\022$"
      "\n\013point_cloud\030\002 \001(\0132\017.yzm.PointCloudb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 164);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "YZMFile.proto", &protobuf_RegisterTypes);
  ::yzm::protobuf_YZMMeasureDocument_2eproto::AddDescriptors();
  ::yzm::protobuf_YZMPointCloud_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_YZMFile_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YZMFile::kDocumentFieldNumber;
const int YZMFile::kPointCloudFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YZMFile::YZMFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_YZMFile_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yzm.YZMFile)
}
YZMFile::YZMFile(const YZMFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    document_ = new ::yzm::MeasureDocument(*from.document_);
  } else {
    document_ = NULL;
  }
  if (from.has_point_cloud()) {
    point_cloud_ = new ::yzm::PointCloud(*from.point_cloud_);
  } else {
    point_cloud_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:yzm.YZMFile)
}

void YZMFile::SharedCtor() {
  ::memset(&document_, 0, reinterpret_cast<char*>(&point_cloud_) -
    reinterpret_cast<char*>(&document_) + sizeof(point_cloud_));
  _cached_size_ = 0;
}

YZMFile::~YZMFile() {
  // @@protoc_insertion_point(destructor:yzm.YZMFile)
  SharedDtor();
}

void YZMFile::SharedDtor() {
  if (this != internal_default_instance()) {
    delete document_;
  }
  if (this != internal_default_instance()) {
    delete point_cloud_;
  }
}

void YZMFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YZMFile::descriptor() {
  protobuf_YZMFile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMFile_2eproto::file_level_metadata[0].descriptor;
}

const YZMFile& YZMFile::default_instance() {
  protobuf_YZMFile_2eproto::InitDefaults();
  return *internal_default_instance();
}

YZMFile* YZMFile::New(::google::protobuf::Arena* arena) const {
  YZMFile* n = new YZMFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YZMFile::Clear() {
// @@protoc_insertion_point(message_clear_start:yzm.YZMFile)
  if (GetArenaNoVirtual() == NULL && document_ != NULL) {
    delete document_;
  }
  document_ = NULL;
  if (GetArenaNoVirtual() == NULL && point_cloud_ != NULL) {
    delete point_cloud_;
  }
  point_cloud_ = NULL;
}

bool YZMFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yzm.YZMFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .yzm.MeasureDocument document = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_document()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .yzm.PointCloud point_cloud = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point_cloud()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yzm.YZMFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yzm.YZMFile)
  return false;
#undef DO_
}

void YZMFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yzm.YZMFile)
  // .yzm.MeasureDocument document = 1;
  if (this->has_document()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->document_, output);
  }

  // .yzm.PointCloud point_cloud = 2;
  if (this->has_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point_cloud_, output);
  }

  // @@protoc_insertion_point(serialize_end:yzm.YZMFile)
}

::google::protobuf::uint8* YZMFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yzm.YZMFile)
  // .yzm.MeasureDocument document = 1;
  if (this->has_document()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->document_, false, target);
  }

  // .yzm.PointCloud point_cloud = 2;
  if (this->has_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->point_cloud_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yzm.YZMFile)
  return target;
}

size_t YZMFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yzm.YZMFile)
  size_t total_size = 0;

  // .yzm.MeasureDocument document = 1;
  if (this->has_document()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->document_);
  }

  // .yzm.PointCloud point_cloud = 2;
  if (this->has_point_cloud()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_cloud_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YZMFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yzm.YZMFile)
  GOOGLE_DCHECK_NE(&from, this);
  const YZMFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YZMFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yzm.YZMFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yzm.YZMFile)
    MergeFrom(*source);
  }
}

void YZMFile::MergeFrom(const YZMFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yzm.YZMFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_document()) {
    mutable_document()->::yzm::MeasureDocument::MergeFrom(from.document());
  }
  if (from.has_point_cloud()) {
    mutable_point_cloud()->::yzm::PointCloud::MergeFrom(from.point_cloud());
  }
}

void YZMFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yzm.YZMFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YZMFile::CopyFrom(const YZMFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yzm.YZMFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YZMFile::IsInitialized() const {
  return true;
}

void YZMFile::Swap(YZMFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YZMFile::InternalSwap(YZMFile* other) {
  std::swap(document_, other->document_);
  std::swap(point_cloud_, other->point_cloud_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YZMFile::GetMetadata() const {
  protobuf_YZMFile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMFile_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YZMFile

// .yzm.MeasureDocument document = 1;
bool YZMFile::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
void YZMFile::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
const ::yzm::MeasureDocument& YZMFile::document() const {
  // @@protoc_insertion_point(field_get:yzm.YZMFile.document)
  return document_ != NULL ? *document_
                         : *::yzm::MeasureDocument::internal_default_instance();
}
::yzm::MeasureDocument* YZMFile::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::yzm::MeasureDocument;
  }
  // @@protoc_insertion_point(field_mutable:yzm.YZMFile.document)
  return document_;
}
::yzm::MeasureDocument* YZMFile::release_document() {
  // @@protoc_insertion_point(field_release:yzm.YZMFile.document)
  
  ::yzm::MeasureDocument* temp = document_;
  document_ = NULL;
  return temp;
}
void YZMFile::set_allocated_document(::yzm::MeasureDocument* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yzm.YZMFile.document)
}

// .yzm.PointCloud point_cloud = 2;
bool YZMFile::has_point_cloud() const {
  return this != internal_default_instance() && point_cloud_ != NULL;
}
void YZMFile::clear_point_cloud() {
  if (GetArenaNoVirtual() == NULL && point_cloud_ != NULL) delete point_cloud_;
  point_cloud_ = NULL;
}
const ::yzm::PointCloud& YZMFile::point_cloud() const {
  // @@protoc_insertion_point(field_get:yzm.YZMFile.point_cloud)
  return point_cloud_ != NULL ? *point_cloud_
                         : *::yzm::PointCloud::internal_default_instance();
}
::yzm::PointCloud* YZMFile::mutable_point_cloud() {
  
  if (point_cloud_ == NULL) {
    point_cloud_ = new ::yzm::PointCloud;
  }
  // @@protoc_insertion_point(field_mutable:yzm.YZMFile.point_cloud)
  return point_cloud_;
}
::yzm::PointCloud* YZMFile::release_point_cloud() {
  // @@protoc_insertion_point(field_release:yzm.YZMFile.point_cloud)
  
  ::yzm::PointCloud* temp = point_cloud_;
  point_cloud_ = NULL;
  return temp;
}
void YZMFile::set_allocated_point_cloud(::yzm::PointCloud* point_cloud) {
  delete point_cloud_;
  point_cloud_ = point_cloud;
  if (point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yzm.YZMFile.point_cloud)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yzm

// @@protoc_insertion_point(global_scope)
