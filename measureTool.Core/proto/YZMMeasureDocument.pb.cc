// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YZMMeasureDocument.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "YZMMeasureDocument.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yzm {
class MeasureDocumentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MeasureDocument> {
} _MeasureDocument_default_instance_;

namespace protobuf_YZMMeasureDocument_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureDocument, doc_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureDocument, item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureDocument, croth_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureDocument, left_armpit_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureDocument, right_armpit_point_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(MeasureDocument)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MeasureDocument_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "YZMMeasureDocument.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _MeasureDocument_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::yzm::protobuf_YZMMeasureItem_2eproto::InitDefaults();
  _MeasureDocument_default_instance_.DefaultConstruct();
  _MeasureDocument_default_instance_.get_mutable()->croth_point_ = const_cast< ::yzm::Vector3*>(
      ::yzm::Vector3::internal_default_instance());
  _MeasureDocument_default_instance_.get_mutable()->left_armpit_point_ = const_cast< ::yzm::Vector3*>(
      ::yzm::Vector3::internal_default_instance());
  _MeasureDocument_default_instance_.get_mutable()->right_armpit_point_ = const_cast< ::yzm::Vector3*>(
      ::yzm::Vector3::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030YZMMeasureDocument.proto\022\003yzm\032\024YZMMeas"
      "ureItem.proto\"\277\001\n\017MeasureDocument\022\021\n\tdoc"
      "_index\030\001 \001(\r\022#\n\titem_list\030\003 \003(\0132\020.yzm.Me"
      "asureItem\022!\n\013croth_point\030\004 \001(\0132\014.yzm.Vec"
      "tor3\022\'\n\021left_armpit_point\030\005 \001(\0132\014.yzm.Ve"
      "ctor3\022(\n\022right_armpit_point\030\006 \001(\0132\014.yzm."
      "Vector3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "YZMMeasureDocument.proto", &protobuf_RegisterTypes);
  ::yzm::protobuf_YZMMeasureItem_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_YZMMeasureDocument_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasureDocument::kDocIndexFieldNumber;
const int MeasureDocument::kItemListFieldNumber;
const int MeasureDocument::kCrothPointFieldNumber;
const int MeasureDocument::kLeftArmpitPointFieldNumber;
const int MeasureDocument::kRightArmpitPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasureDocument::MeasureDocument()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_YZMMeasureDocument_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yzm.MeasureDocument)
}
MeasureDocument::MeasureDocument(const MeasureDocument& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_croth_point()) {
    croth_point_ = new ::yzm::Vector3(*from.croth_point_);
  } else {
    croth_point_ = NULL;
  }
  if (from.has_left_armpit_point()) {
    left_armpit_point_ = new ::yzm::Vector3(*from.left_armpit_point_);
  } else {
    left_armpit_point_ = NULL;
  }
  if (from.has_right_armpit_point()) {
    right_armpit_point_ = new ::yzm::Vector3(*from.right_armpit_point_);
  } else {
    right_armpit_point_ = NULL;
  }
  doc_index_ = from.doc_index_;
  // @@protoc_insertion_point(copy_constructor:yzm.MeasureDocument)
}

void MeasureDocument::SharedCtor() {
  ::memset(&croth_point_, 0, reinterpret_cast<char*>(&doc_index_) -
    reinterpret_cast<char*>(&croth_point_) + sizeof(doc_index_));
  _cached_size_ = 0;
}

MeasureDocument::~MeasureDocument() {
  // @@protoc_insertion_point(destructor:yzm.MeasureDocument)
  SharedDtor();
}

void MeasureDocument::SharedDtor() {
  if (this != internal_default_instance()) {
    delete croth_point_;
  }
  if (this != internal_default_instance()) {
    delete left_armpit_point_;
  }
  if (this != internal_default_instance()) {
    delete right_armpit_point_;
  }
}

void MeasureDocument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasureDocument::descriptor() {
  protobuf_YZMMeasureDocument_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMMeasureDocument_2eproto::file_level_metadata[0].descriptor;
}

const MeasureDocument& MeasureDocument::default_instance() {
  protobuf_YZMMeasureDocument_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeasureDocument* MeasureDocument::New(::google::protobuf::Arena* arena) const {
  MeasureDocument* n = new MeasureDocument;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeasureDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:yzm.MeasureDocument)
  item_list_.Clear();
  if (GetArenaNoVirtual() == NULL && croth_point_ != NULL) {
    delete croth_point_;
  }
  croth_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_armpit_point_ != NULL) {
    delete left_armpit_point_;
  }
  left_armpit_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_armpit_point_ != NULL) {
    delete right_armpit_point_;
  }
  right_armpit_point_ = NULL;
  doc_index_ = 0u;
}

bool MeasureDocument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yzm.MeasureDocument)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 doc_index = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doc_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .yzm.MeasureItem item_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .yzm.Vector3 croth_point = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_croth_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .yzm.Vector3 left_armpit_point = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_armpit_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .yzm.Vector3 right_armpit_point = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_armpit_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yzm.MeasureDocument)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yzm.MeasureDocument)
  return false;
#undef DO_
}

void MeasureDocument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yzm.MeasureDocument)
  // uint32 doc_index = 1;
  if (this->doc_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->doc_index(), output);
  }

  // repeated .yzm.MeasureItem item_list = 3;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // .yzm.Vector3 croth_point = 4;
  if (this->has_croth_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->croth_point_, output);
  }

  // .yzm.Vector3 left_armpit_point = 5;
  if (this->has_left_armpit_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->left_armpit_point_, output);
  }

  // .yzm.Vector3 right_armpit_point = 6;
  if (this->has_right_armpit_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->right_armpit_point_, output);
  }

  // @@protoc_insertion_point(serialize_end:yzm.MeasureDocument)
}

::google::protobuf::uint8* MeasureDocument::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yzm.MeasureDocument)
  // uint32 doc_index = 1;
  if (this->doc_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->doc_index(), target);
  }

  // repeated .yzm.MeasureItem item_list = 3;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->item_list(i), false, target);
  }

  // .yzm.Vector3 croth_point = 4;
  if (this->has_croth_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->croth_point_, false, target);
  }

  // .yzm.Vector3 left_armpit_point = 5;
  if (this->has_left_armpit_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->left_armpit_point_, false, target);
  }

  // .yzm.Vector3 right_armpit_point = 6;
  if (this->has_right_armpit_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->right_armpit_point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yzm.MeasureDocument)
  return target;
}

size_t MeasureDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yzm.MeasureDocument)
  size_t total_size = 0;

  // repeated .yzm.MeasureItem item_list = 3;
  {
    unsigned int count = this->item_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(i));
    }
  }

  // .yzm.Vector3 croth_point = 4;
  if (this->has_croth_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->croth_point_);
  }

  // .yzm.Vector3 left_armpit_point = 5;
  if (this->has_left_armpit_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_armpit_point_);
  }

  // .yzm.Vector3 right_armpit_point = 6;
  if (this->has_right_armpit_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_armpit_point_);
  }

  // uint32 doc_index = 1;
  if (this->doc_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->doc_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasureDocument::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yzm.MeasureDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasureDocument* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasureDocument>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yzm.MeasureDocument)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yzm.MeasureDocument)
    MergeFrom(*source);
  }
}

void MeasureDocument::MergeFrom(const MeasureDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yzm.MeasureDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_list_.MergeFrom(from.item_list_);
  if (from.has_croth_point()) {
    mutable_croth_point()->::yzm::Vector3::MergeFrom(from.croth_point());
  }
  if (from.has_left_armpit_point()) {
    mutable_left_armpit_point()->::yzm::Vector3::MergeFrom(from.left_armpit_point());
  }
  if (from.has_right_armpit_point()) {
    mutable_right_armpit_point()->::yzm::Vector3::MergeFrom(from.right_armpit_point());
  }
  if (from.doc_index() != 0) {
    set_doc_index(from.doc_index());
  }
}

void MeasureDocument::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yzm.MeasureDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasureDocument::CopyFrom(const MeasureDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yzm.MeasureDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureDocument::IsInitialized() const {
  return true;
}

void MeasureDocument::Swap(MeasureDocument* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasureDocument::InternalSwap(MeasureDocument* other) {
  item_list_.UnsafeArenaSwap(&other->item_list_);
  std::swap(croth_point_, other->croth_point_);
  std::swap(left_armpit_point_, other->left_armpit_point_);
  std::swap(right_armpit_point_, other->right_armpit_point_);
  std::swap(doc_index_, other->doc_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeasureDocument::GetMetadata() const {
  protobuf_YZMMeasureDocument_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMMeasureDocument_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeasureDocument

// uint32 doc_index = 1;
void MeasureDocument::clear_doc_index() {
  doc_index_ = 0u;
}
::google::protobuf::uint32 MeasureDocument::doc_index() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureDocument.doc_index)
  return doc_index_;
}
void MeasureDocument::set_doc_index(::google::protobuf::uint32 value) {
  
  doc_index_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureDocument.doc_index)
}

// repeated .yzm.MeasureItem item_list = 3;
int MeasureDocument::item_list_size() const {
  return item_list_.size();
}
void MeasureDocument::clear_item_list() {
  item_list_.Clear();
}
const ::yzm::MeasureItem& MeasureDocument::item_list(int index) const {
  // @@protoc_insertion_point(field_get:yzm.MeasureDocument.item_list)
  return item_list_.Get(index);
}
::yzm::MeasureItem* MeasureDocument::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:yzm.MeasureDocument.item_list)
  return item_list_.Mutable(index);
}
::yzm::MeasureItem* MeasureDocument::add_item_list() {
  // @@protoc_insertion_point(field_add:yzm.MeasureDocument.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::yzm::MeasureItem >*
MeasureDocument::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:yzm.MeasureDocument.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::yzm::MeasureItem >&
MeasureDocument::item_list() const {
  // @@protoc_insertion_point(field_list:yzm.MeasureDocument.item_list)
  return item_list_;
}

// .yzm.Vector3 croth_point = 4;
bool MeasureDocument::has_croth_point() const {
  return this != internal_default_instance() && croth_point_ != NULL;
}
void MeasureDocument::clear_croth_point() {
  if (GetArenaNoVirtual() == NULL && croth_point_ != NULL) delete croth_point_;
  croth_point_ = NULL;
}
const ::yzm::Vector3& MeasureDocument::croth_point() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureDocument.croth_point)
  return croth_point_ != NULL ? *croth_point_
                         : *::yzm::Vector3::internal_default_instance();
}
::yzm::Vector3* MeasureDocument::mutable_croth_point() {
  
  if (croth_point_ == NULL) {
    croth_point_ = new ::yzm::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:yzm.MeasureDocument.croth_point)
  return croth_point_;
}
::yzm::Vector3* MeasureDocument::release_croth_point() {
  // @@protoc_insertion_point(field_release:yzm.MeasureDocument.croth_point)
  
  ::yzm::Vector3* temp = croth_point_;
  croth_point_ = NULL;
  return temp;
}
void MeasureDocument::set_allocated_croth_point(::yzm::Vector3* croth_point) {
  delete croth_point_;
  croth_point_ = croth_point;
  if (croth_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yzm.MeasureDocument.croth_point)
}

// .yzm.Vector3 left_armpit_point = 5;
bool MeasureDocument::has_left_armpit_point() const {
  return this != internal_default_instance() && left_armpit_point_ != NULL;
}
void MeasureDocument::clear_left_armpit_point() {
  if (GetArenaNoVirtual() == NULL && left_armpit_point_ != NULL) delete left_armpit_point_;
  left_armpit_point_ = NULL;
}
const ::yzm::Vector3& MeasureDocument::left_armpit_point() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureDocument.left_armpit_point)
  return left_armpit_point_ != NULL ? *left_armpit_point_
                         : *::yzm::Vector3::internal_default_instance();
}
::yzm::Vector3* MeasureDocument::mutable_left_armpit_point() {
  
  if (left_armpit_point_ == NULL) {
    left_armpit_point_ = new ::yzm::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:yzm.MeasureDocument.left_armpit_point)
  return left_armpit_point_;
}
::yzm::Vector3* MeasureDocument::release_left_armpit_point() {
  // @@protoc_insertion_point(field_release:yzm.MeasureDocument.left_armpit_point)
  
  ::yzm::Vector3* temp = left_armpit_point_;
  left_armpit_point_ = NULL;
  return temp;
}
void MeasureDocument::set_allocated_left_armpit_point(::yzm::Vector3* left_armpit_point) {
  delete left_armpit_point_;
  left_armpit_point_ = left_armpit_point;
  if (left_armpit_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yzm.MeasureDocument.left_armpit_point)
}

// .yzm.Vector3 right_armpit_point = 6;
bool MeasureDocument::has_right_armpit_point() const {
  return this != internal_default_instance() && right_armpit_point_ != NULL;
}
void MeasureDocument::clear_right_armpit_point() {
  if (GetArenaNoVirtual() == NULL && right_armpit_point_ != NULL) delete right_armpit_point_;
  right_armpit_point_ = NULL;
}
const ::yzm::Vector3& MeasureDocument::right_armpit_point() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureDocument.right_armpit_point)
  return right_armpit_point_ != NULL ? *right_armpit_point_
                         : *::yzm::Vector3::internal_default_instance();
}
::yzm::Vector3* MeasureDocument::mutable_right_armpit_point() {
  
  if (right_armpit_point_ == NULL) {
    right_armpit_point_ = new ::yzm::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:yzm.MeasureDocument.right_armpit_point)
  return right_armpit_point_;
}
::yzm::Vector3* MeasureDocument::release_right_armpit_point() {
  // @@protoc_insertion_point(field_release:yzm.MeasureDocument.right_armpit_point)
  
  ::yzm::Vector3* temp = right_armpit_point_;
  right_armpit_point_ = NULL;
  return temp;
}
void MeasureDocument::set_allocated_right_armpit_point(::yzm::Vector3* right_armpit_point) {
  delete right_armpit_point_;
  right_armpit_point_ = right_armpit_point;
  if (right_armpit_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yzm.MeasureDocument.right_armpit_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yzm

// @@protoc_insertion_point(global_scope)
