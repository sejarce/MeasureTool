// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YZMMeasureItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "YZMMeasureItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yzm {
class Vector3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vector3> {
} _Vector3_default_instance_;
class MeasureItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MeasureItem> {
} _MeasureItem_default_instance_;

namespace protobuf_YZMMeasureItem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, auto_measure_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, dom_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, dom_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, edit_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, point_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasureItem, dom_extension_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Vector3)},
  { 7, -1, sizeof(MeasureItem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MeasureItem_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "YZMMeasureItem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vector3_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MeasureItem_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vector3_default_instance_.DefaultConstruct();
  _MeasureItem_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024YZMMeasureItem.proto\022\003yzm\"*\n\007Vector3\022\t"
      "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\355\003\n\013Meas"
      "ureItem\022<\n\021auto_measure_type\030\001 \001(\0162!.yzm"
      ".MeasureItem.EAutoMeasureType\022\020\n\010dom_typ"
      "e\030\002 \001(\005\022\021\n\tdom_index\030\003 \001(\r\022\014\n\004name\030\004 \001(\t"
      "\022\r\n\005value\030\005 \001(\002\022\021\n\tedit_time\030\006 \001(\r\022 \n\npo"
      "int_list\030\007 \003(\0132\014.yzm.Vector3\022\025\n\rdom_exte"
      "nsion\030\010 \001(\014\"\221\002\n\020EAutoMeasureType\022\010\n\004None"
      "\020\000\022\016\n\nBodyHeight\020\001\022\016\n\nChestWidth\020\002\022\r\n\tBa"
      "ckWidth\020\003\022\021\n\rShoulderWidth\020\004\022\022\n\016ChestDim"
      "ension\020\005\022\022\n\016WaistDimension\020\006\022\022\n\016WristDim"
      "ension\020\007\022\021\n\rKneeDimension\020\010\022\020\n\014HipDimens"
      "ion\020\t\022\020\n\014ArmDimension\020\n\022\r\n\tArmLength\020\013\022\016"
      "\n\nBPDistance\020\014\022\020\n\014LegDimension\020\r\022\r\n\tLegL"
      "ength\020\016b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 575);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "YZMMeasureItem.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_YZMMeasureItem_2eproto

const ::google::protobuf::EnumDescriptor* MeasureItem_EAutoMeasureType_descriptor() {
  protobuf_YZMMeasureItem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMMeasureItem_2eproto::file_level_enum_descriptors[0];
}
bool MeasureItem_EAutoMeasureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeasureItem_EAutoMeasureType MeasureItem::None;
const MeasureItem_EAutoMeasureType MeasureItem::BodyHeight;
const MeasureItem_EAutoMeasureType MeasureItem::ChestWidth;
const MeasureItem_EAutoMeasureType MeasureItem::BackWidth;
const MeasureItem_EAutoMeasureType MeasureItem::ShoulderWidth;
const MeasureItem_EAutoMeasureType MeasureItem::ChestDimension;
const MeasureItem_EAutoMeasureType MeasureItem::WaistDimension;
const MeasureItem_EAutoMeasureType MeasureItem::WristDimension;
const MeasureItem_EAutoMeasureType MeasureItem::KneeDimension;
const MeasureItem_EAutoMeasureType MeasureItem::HipDimension;
const MeasureItem_EAutoMeasureType MeasureItem::ArmDimension;
const MeasureItem_EAutoMeasureType MeasureItem::ArmLength;
const MeasureItem_EAutoMeasureType MeasureItem::BPDistance;
const MeasureItem_EAutoMeasureType MeasureItem::LegDimension;
const MeasureItem_EAutoMeasureType MeasureItem::LegLength;
const MeasureItem_EAutoMeasureType MeasureItem::EAutoMeasureType_MIN;
const MeasureItem_EAutoMeasureType MeasureItem::EAutoMeasureType_MAX;
const int MeasureItem::EAutoMeasureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_YZMMeasureItem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yzm.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:yzm.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:yzm.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_YZMMeasureItem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMMeasureItem_2eproto::file_level_metadata[0].descriptor;
}

const Vector3& Vector3::default_instance() {
  protobuf_YZMMeasureItem_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:yzm.Vector3)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yzm.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yzm.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yzm.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yzm.Vector3)
  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:yzm.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yzm.Vector3)
  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yzm.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yzm.Vector3)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yzm.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yzm.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yzm.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yzm.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yzm.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yzm.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_YZMMeasureItem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMMeasureItem_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// float x = 1;
void Vector3::clear_x() {
  x_ = 0;
}
float Vector3::x() const {
  // @@protoc_insertion_point(field_get:yzm.Vector3.x)
  return x_;
}
void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vector3.x)
}

// float y = 2;
void Vector3::clear_y() {
  y_ = 0;
}
float Vector3::y() const {
  // @@protoc_insertion_point(field_get:yzm.Vector3.y)
  return y_;
}
void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vector3.y)
}

// float z = 3;
void Vector3::clear_z() {
  z_ = 0;
}
float Vector3::z() const {
  // @@protoc_insertion_point(field_get:yzm.Vector3.z)
  return z_;
}
void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasureItem::kAutoMeasureTypeFieldNumber;
const int MeasureItem::kDomTypeFieldNumber;
const int MeasureItem::kDomIndexFieldNumber;
const int MeasureItem::kNameFieldNumber;
const int MeasureItem::kValueFieldNumber;
const int MeasureItem::kEditTimeFieldNumber;
const int MeasureItem::kPointListFieldNumber;
const int MeasureItem::kDomExtensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasureItem::MeasureItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_YZMMeasureItem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yzm.MeasureItem)
}
MeasureItem::MeasureItem(const MeasureItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      point_list_(from.point_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  dom_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dom_extension().size() > 0) {
    dom_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dom_extension_);
  }
  ::memcpy(&auto_measure_type_, &from.auto_measure_type_,
    reinterpret_cast<char*>(&edit_time_) -
    reinterpret_cast<char*>(&auto_measure_type_) + sizeof(edit_time_));
  // @@protoc_insertion_point(copy_constructor:yzm.MeasureItem)
}

void MeasureItem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dom_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_measure_type_, 0, reinterpret_cast<char*>(&edit_time_) -
    reinterpret_cast<char*>(&auto_measure_type_) + sizeof(edit_time_));
  _cached_size_ = 0;
}

MeasureItem::~MeasureItem() {
  // @@protoc_insertion_point(destructor:yzm.MeasureItem)
  SharedDtor();
}

void MeasureItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dom_extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MeasureItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasureItem::descriptor() {
  protobuf_YZMMeasureItem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMMeasureItem_2eproto::file_level_metadata[1].descriptor;
}

const MeasureItem& MeasureItem::default_instance() {
  protobuf_YZMMeasureItem_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeasureItem* MeasureItem::New(::google::protobuf::Arena* arena) const {
  MeasureItem* n = new MeasureItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeasureItem::Clear() {
// @@protoc_insertion_point(message_clear_start:yzm.MeasureItem)
  point_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dom_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_measure_type_, 0, reinterpret_cast<char*>(&edit_time_) -
    reinterpret_cast<char*>(&auto_measure_type_) + sizeof(edit_time_));
}

bool MeasureItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yzm.MeasureItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .yzm.MeasureItem.EAutoMeasureType auto_measure_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_auto_measure_type(static_cast< ::yzm::MeasureItem_EAutoMeasureType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dom_type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dom_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dom_index = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dom_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yzm.MeasureItem.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 edit_time = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .yzm.Vector3 point_list = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bytes dom_extension = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dom_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yzm.MeasureItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yzm.MeasureItem)
  return false;
#undef DO_
}

void MeasureItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yzm.MeasureItem)
  // .yzm.MeasureItem.EAutoMeasureType auto_measure_type = 1;
  if (this->auto_measure_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->auto_measure_type(), output);
  }

  // int32 dom_type = 2;
  if (this->dom_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dom_type(), output);
  }

  // uint32 dom_index = 3;
  if (this->dom_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dom_index(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yzm.MeasureItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // float value = 5;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->value(), output);
  }

  // uint32 edit_time = 6;
  if (this->edit_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->edit_time(), output);
  }

  // repeated .yzm.Vector3 point_list = 7;
  for (unsigned int i = 0, n = this->point_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->point_list(i), output);
  }

  // bytes dom_extension = 8;
  if (this->dom_extension().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->dom_extension(), output);
  }

  // @@protoc_insertion_point(serialize_end:yzm.MeasureItem)
}

::google::protobuf::uint8* MeasureItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yzm.MeasureItem)
  // .yzm.MeasureItem.EAutoMeasureType auto_measure_type = 1;
  if (this->auto_measure_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->auto_measure_type(), target);
  }

  // int32 dom_type = 2;
  if (this->dom_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dom_type(), target);
  }

  // uint32 dom_index = 3;
  if (this->dom_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dom_index(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yzm.MeasureItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // float value = 5;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->value(), target);
  }

  // uint32 edit_time = 6;
  if (this->edit_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->edit_time(), target);
  }

  // repeated .yzm.Vector3 point_list = 7;
  for (unsigned int i = 0, n = this->point_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->point_list(i), false, target);
  }

  // bytes dom_extension = 8;
  if (this->dom_extension().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->dom_extension(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yzm.MeasureItem)
  return target;
}

size_t MeasureItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yzm.MeasureItem)
  size_t total_size = 0;

  // repeated .yzm.Vector3 point_list = 7;
  {
    unsigned int count = this->point_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_list(i));
    }
  }

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes dom_extension = 8;
  if (this->dom_extension().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dom_extension());
  }

  // .yzm.MeasureItem.EAutoMeasureType auto_measure_type = 1;
  if (this->auto_measure_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->auto_measure_type());
  }

  // int32 dom_type = 2;
  if (this->dom_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dom_type());
  }

  // uint32 dom_index = 3;
  if (this->dom_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dom_index());
  }

  // float value = 5;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // uint32 edit_time = 6;
  if (this->edit_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->edit_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasureItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yzm.MeasureItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasureItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasureItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yzm.MeasureItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yzm.MeasureItem)
    MergeFrom(*source);
  }
}

void MeasureItem::MergeFrom(const MeasureItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yzm.MeasureItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  point_list_.MergeFrom(from.point_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dom_extension().size() > 0) {

    dom_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dom_extension_);
  }
  if (from.auto_measure_type() != 0) {
    set_auto_measure_type(from.auto_measure_type());
  }
  if (from.dom_type() != 0) {
    set_dom_type(from.dom_type());
  }
  if (from.dom_index() != 0) {
    set_dom_index(from.dom_index());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.edit_time() != 0) {
    set_edit_time(from.edit_time());
  }
}

void MeasureItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yzm.MeasureItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasureItem::CopyFrom(const MeasureItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yzm.MeasureItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasureItem::IsInitialized() const {
  return true;
}

void MeasureItem::Swap(MeasureItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasureItem::InternalSwap(MeasureItem* other) {
  point_list_.UnsafeArenaSwap(&other->point_list_);
  name_.Swap(&other->name_);
  dom_extension_.Swap(&other->dom_extension_);
  std::swap(auto_measure_type_, other->auto_measure_type_);
  std::swap(dom_type_, other->dom_type_);
  std::swap(dom_index_, other->dom_index_);
  std::swap(value_, other->value_);
  std::swap(edit_time_, other->edit_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeasureItem::GetMetadata() const {
  protobuf_YZMMeasureItem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMMeasureItem_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeasureItem

// .yzm.MeasureItem.EAutoMeasureType auto_measure_type = 1;
void MeasureItem::clear_auto_measure_type() {
  auto_measure_type_ = 0;
}
::yzm::MeasureItem_EAutoMeasureType MeasureItem::auto_measure_type() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.auto_measure_type)
  return static_cast< ::yzm::MeasureItem_EAutoMeasureType >(auto_measure_type_);
}
void MeasureItem::set_auto_measure_type(::yzm::MeasureItem_EAutoMeasureType value) {
  
  auto_measure_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.auto_measure_type)
}

// int32 dom_type = 2;
void MeasureItem::clear_dom_type() {
  dom_type_ = 0;
}
::google::protobuf::int32 MeasureItem::dom_type() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.dom_type)
  return dom_type_;
}
void MeasureItem::set_dom_type(::google::protobuf::int32 value) {
  
  dom_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.dom_type)
}

// uint32 dom_index = 3;
void MeasureItem::clear_dom_index() {
  dom_index_ = 0u;
}
::google::protobuf::uint32 MeasureItem::dom_index() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.dom_index)
  return dom_index_;
}
void MeasureItem::set_dom_index(::google::protobuf::uint32 value) {
  
  dom_index_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.dom_index)
}

// string name = 4;
void MeasureItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MeasureItem::name() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.name)
  return name_.GetNoArena();
}
void MeasureItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.name)
}
#if LANG_CXX11
void MeasureItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.MeasureItem.name)
}
#endif
void MeasureItem::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.MeasureItem.name)
}
void MeasureItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.MeasureItem.name)
}
::std::string* MeasureItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:yzm.MeasureItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MeasureItem::release_name() {
  // @@protoc_insertion_point(field_release:yzm.MeasureItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MeasureItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:yzm.MeasureItem.name)
}

// float value = 5;
void MeasureItem::clear_value() {
  value_ = 0;
}
float MeasureItem::value() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.value)
  return value_;
}
void MeasureItem::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.value)
}

// uint32 edit_time = 6;
void MeasureItem::clear_edit_time() {
  edit_time_ = 0u;
}
::google::protobuf::uint32 MeasureItem::edit_time() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.edit_time)
  return edit_time_;
}
void MeasureItem::set_edit_time(::google::protobuf::uint32 value) {
  
  edit_time_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.edit_time)
}

// repeated .yzm.Vector3 point_list = 7;
int MeasureItem::point_list_size() const {
  return point_list_.size();
}
void MeasureItem::clear_point_list() {
  point_list_.Clear();
}
const ::yzm::Vector3& MeasureItem::point_list(int index) const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.point_list)
  return point_list_.Get(index);
}
::yzm::Vector3* MeasureItem::mutable_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:yzm.MeasureItem.point_list)
  return point_list_.Mutable(index);
}
::yzm::Vector3* MeasureItem::add_point_list() {
  // @@protoc_insertion_point(field_add:yzm.MeasureItem.point_list)
  return point_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::yzm::Vector3 >*
MeasureItem::mutable_point_list() {
  // @@protoc_insertion_point(field_mutable_list:yzm.MeasureItem.point_list)
  return &point_list_;
}
const ::google::protobuf::RepeatedPtrField< ::yzm::Vector3 >&
MeasureItem::point_list() const {
  // @@protoc_insertion_point(field_list:yzm.MeasureItem.point_list)
  return point_list_;
}

// bytes dom_extension = 8;
void MeasureItem::clear_dom_extension() {
  dom_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MeasureItem::dom_extension() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.dom_extension)
  return dom_extension_.GetNoArena();
}
void MeasureItem::set_dom_extension(const ::std::string& value) {
  
  dom_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.dom_extension)
}
#if LANG_CXX11
void MeasureItem::set_dom_extension(::std::string&& value) {
  
  dom_extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.MeasureItem.dom_extension)
}
#endif
void MeasureItem::set_dom_extension(const char* value) {
  
  dom_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.MeasureItem.dom_extension)
}
void MeasureItem::set_dom_extension(const void* value, size_t size) {
  
  dom_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.MeasureItem.dom_extension)
}
::std::string* MeasureItem::mutable_dom_extension() {
  
  // @@protoc_insertion_point(field_mutable:yzm.MeasureItem.dom_extension)
  return dom_extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MeasureItem::release_dom_extension() {
  // @@protoc_insertion_point(field_release:yzm.MeasureItem.dom_extension)
  
  return dom_extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MeasureItem::set_allocated_dom_extension(::std::string* dom_extension) {
  if (dom_extension != NULL) {
    
  } else {
    
  }
  dom_extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dom_extension);
  // @@protoc_insertion_point(field_set_allocated:yzm.MeasureItem.dom_extension)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yzm

// @@protoc_insertion_point(global_scope)
