// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YZMMeasureItem.proto

#ifndef PROTOBUF_YZMMeasureItem_2eproto__INCLUDED
#define PROTOBUF_YZMMeasureItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace yzm {
class MeasureItem;
class MeasureItemDefaultTypeInternal;
extern MeasureItemDefaultTypeInternal _MeasureItem_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace yzm

namespace yzm {

namespace protobuf_YZMMeasureItem_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_YZMMeasureItem_2eproto

enum MeasureItem_EAutoMeasureType {
  MeasureItem_EAutoMeasureType_None = 0,
  MeasureItem_EAutoMeasureType_BodyHeight = 1,
  MeasureItem_EAutoMeasureType_ChestWidth = 2,
  MeasureItem_EAutoMeasureType_BackWidth = 3,
  MeasureItem_EAutoMeasureType_ShoulderWidth = 4,
  MeasureItem_EAutoMeasureType_ChestDimension = 5,
  MeasureItem_EAutoMeasureType_WaistDimension = 6,
  MeasureItem_EAutoMeasureType_WristDimension = 7,
  MeasureItem_EAutoMeasureType_KneeDimension = 8,
  MeasureItem_EAutoMeasureType_HipDimension = 9,
  MeasureItem_EAutoMeasureType_ArmDimension = 10,
  MeasureItem_EAutoMeasureType_ArmLength = 11,
  MeasureItem_EAutoMeasureType_BPDistance = 12,
  MeasureItem_EAutoMeasureType_LegDimension = 13,
  MeasureItem_EAutoMeasureType_LegLength = 14,
  MeasureItem_EAutoMeasureType_MeasureItem_EAutoMeasureType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MeasureItem_EAutoMeasureType_MeasureItem_EAutoMeasureType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MeasureItem_EAutoMeasureType_IsValid(int value);
const MeasureItem_EAutoMeasureType MeasureItem_EAutoMeasureType_EAutoMeasureType_MIN = MeasureItem_EAutoMeasureType_None;
const MeasureItem_EAutoMeasureType MeasureItem_EAutoMeasureType_EAutoMeasureType_MAX = MeasureItem_EAutoMeasureType_LegLength;
const int MeasureItem_EAutoMeasureType_EAutoMeasureType_ARRAYSIZE = MeasureItem_EAutoMeasureType_EAutoMeasureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MeasureItem_EAutoMeasureType_descriptor();
inline const ::std::string& MeasureItem_EAutoMeasureType_Name(MeasureItem_EAutoMeasureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MeasureItem_EAutoMeasureType_descriptor(), value);
}
inline bool MeasureItem_EAutoMeasureType_Parse(
    const ::std::string& name, MeasureItem_EAutoMeasureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MeasureItem_EAutoMeasureType>(
    MeasureItem_EAutoMeasureType_descriptor(), name, value);
}
// ===================================================================

class Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:yzm.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  inline Vector3* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:yzm.Vector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct  protobuf_YZMMeasureItem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeasureItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:yzm.MeasureItem) */ {
 public:
  MeasureItem();
  virtual ~MeasureItem();

  MeasureItem(const MeasureItem& from);

  inline MeasureItem& operator=(const MeasureItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeasureItem& default_instance();

  static inline const MeasureItem* internal_default_instance() {
    return reinterpret_cast<const MeasureItem*>(
               &_MeasureItem_default_instance_);
  }

  void Swap(MeasureItem* other);

  // implements Message ----------------------------------------------

  inline MeasureItem* New() const PROTOBUF_FINAL { return New(NULL); }

  MeasureItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MeasureItem& from);
  void MergeFrom(const MeasureItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MeasureItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MeasureItem_EAutoMeasureType EAutoMeasureType;
  static const EAutoMeasureType None =
    MeasureItem_EAutoMeasureType_None;
  static const EAutoMeasureType BodyHeight =
    MeasureItem_EAutoMeasureType_BodyHeight;
  static const EAutoMeasureType ChestWidth =
    MeasureItem_EAutoMeasureType_ChestWidth;
  static const EAutoMeasureType BackWidth =
    MeasureItem_EAutoMeasureType_BackWidth;
  static const EAutoMeasureType ShoulderWidth =
    MeasureItem_EAutoMeasureType_ShoulderWidth;
  static const EAutoMeasureType ChestDimension =
    MeasureItem_EAutoMeasureType_ChestDimension;
  static const EAutoMeasureType WaistDimension =
    MeasureItem_EAutoMeasureType_WaistDimension;
  static const EAutoMeasureType WristDimension =
    MeasureItem_EAutoMeasureType_WristDimension;
  static const EAutoMeasureType KneeDimension =
    MeasureItem_EAutoMeasureType_KneeDimension;
  static const EAutoMeasureType HipDimension =
    MeasureItem_EAutoMeasureType_HipDimension;
  static const EAutoMeasureType ArmDimension =
    MeasureItem_EAutoMeasureType_ArmDimension;
  static const EAutoMeasureType ArmLength =
    MeasureItem_EAutoMeasureType_ArmLength;
  static const EAutoMeasureType BPDistance =
    MeasureItem_EAutoMeasureType_BPDistance;
  static const EAutoMeasureType LegDimension =
    MeasureItem_EAutoMeasureType_LegDimension;
  static const EAutoMeasureType LegLength =
    MeasureItem_EAutoMeasureType_LegLength;
  static inline bool EAutoMeasureType_IsValid(int value) {
    return MeasureItem_EAutoMeasureType_IsValid(value);
  }
  static const EAutoMeasureType EAutoMeasureType_MIN =
    MeasureItem_EAutoMeasureType_EAutoMeasureType_MIN;
  static const EAutoMeasureType EAutoMeasureType_MAX =
    MeasureItem_EAutoMeasureType_EAutoMeasureType_MAX;
  static const int EAutoMeasureType_ARRAYSIZE =
    MeasureItem_EAutoMeasureType_EAutoMeasureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EAutoMeasureType_descriptor() {
    return MeasureItem_EAutoMeasureType_descriptor();
  }
  static inline const ::std::string& EAutoMeasureType_Name(EAutoMeasureType value) {
    return MeasureItem_EAutoMeasureType_Name(value);
  }
  static inline bool EAutoMeasureType_Parse(const ::std::string& name,
      EAutoMeasureType* value) {
    return MeasureItem_EAutoMeasureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .yzm.Vector3 point_list = 7;
  int point_list_size() const;
  void clear_point_list();
  static const int kPointListFieldNumber = 7;
  const ::yzm::Vector3& point_list(int index) const;
  ::yzm::Vector3* mutable_point_list(int index);
  ::yzm::Vector3* add_point_list();
  ::google::protobuf::RepeatedPtrField< ::yzm::Vector3 >*
      mutable_point_list();
  const ::google::protobuf::RepeatedPtrField< ::yzm::Vector3 >&
      point_list() const;

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes dom_extension = 8;
  void clear_dom_extension();
  static const int kDomExtensionFieldNumber = 8;
  const ::std::string& dom_extension() const;
  void set_dom_extension(const ::std::string& value);
  #if LANG_CXX11
  void set_dom_extension(::std::string&& value);
  #endif
  void set_dom_extension(const char* value);
  void set_dom_extension(const void* value, size_t size);
  ::std::string* mutable_dom_extension();
  ::std::string* release_dom_extension();
  void set_allocated_dom_extension(::std::string* dom_extension);

  // .yzm.MeasureItem.EAutoMeasureType auto_measure_type = 1;
  void clear_auto_measure_type();
  static const int kAutoMeasureTypeFieldNumber = 1;
  ::yzm::MeasureItem_EAutoMeasureType auto_measure_type() const;
  void set_auto_measure_type(::yzm::MeasureItem_EAutoMeasureType value);

  // int32 dom_type = 2;
  void clear_dom_type();
  static const int kDomTypeFieldNumber = 2;
  ::google::protobuf::int32 dom_type() const;
  void set_dom_type(::google::protobuf::int32 value);

  // uint32 dom_index = 3;
  void clear_dom_index();
  static const int kDomIndexFieldNumber = 3;
  ::google::protobuf::uint32 dom_index() const;
  void set_dom_index(::google::protobuf::uint32 value);

  // float value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  float value() const;
  void set_value(float value);

  // uint32 edit_time = 6;
  void clear_edit_time();
  static const int kEditTimeFieldNumber = 6;
  ::google::protobuf::uint32 edit_time() const;
  void set_edit_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:yzm.MeasureItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::yzm::Vector3 > point_list_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr dom_extension_;
  int auto_measure_type_;
  ::google::protobuf::int32 dom_type_;
  ::google::protobuf::uint32 dom_index_;
  float value_;
  ::google::protobuf::uint32 edit_time_;
  mutable int _cached_size_;
  friend struct  protobuf_YZMMeasureItem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:yzm.Vector3.x)
  return x_;
}
inline void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:yzm.Vector3.y)
  return y_;
}
inline void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:yzm.Vector3.z)
  return z_;
}
inline void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vector3.z)
}

// -------------------------------------------------------------------

// MeasureItem

// .yzm.MeasureItem.EAutoMeasureType auto_measure_type = 1;
inline void MeasureItem::clear_auto_measure_type() {
  auto_measure_type_ = 0;
}
inline ::yzm::MeasureItem_EAutoMeasureType MeasureItem::auto_measure_type() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.auto_measure_type)
  return static_cast< ::yzm::MeasureItem_EAutoMeasureType >(auto_measure_type_);
}
inline void MeasureItem::set_auto_measure_type(::yzm::MeasureItem_EAutoMeasureType value) {
  
  auto_measure_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.auto_measure_type)
}

// int32 dom_type = 2;
inline void MeasureItem::clear_dom_type() {
  dom_type_ = 0;
}
inline ::google::protobuf::int32 MeasureItem::dom_type() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.dom_type)
  return dom_type_;
}
inline void MeasureItem::set_dom_type(::google::protobuf::int32 value) {
  
  dom_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.dom_type)
}

// uint32 dom_index = 3;
inline void MeasureItem::clear_dom_index() {
  dom_index_ = 0u;
}
inline ::google::protobuf::uint32 MeasureItem::dom_index() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.dom_index)
  return dom_index_;
}
inline void MeasureItem::set_dom_index(::google::protobuf::uint32 value) {
  
  dom_index_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.dom_index)
}

// string name = 4;
inline void MeasureItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasureItem::name() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.name)
  return name_.GetNoArena();
}
inline void MeasureItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.name)
}
#if LANG_CXX11
inline void MeasureItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.MeasureItem.name)
}
#endif
inline void MeasureItem::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.MeasureItem.name)
}
inline void MeasureItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.MeasureItem.name)
}
inline ::std::string* MeasureItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:yzm.MeasureItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasureItem::release_name() {
  // @@protoc_insertion_point(field_release:yzm.MeasureItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasureItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:yzm.MeasureItem.name)
}

// float value = 5;
inline void MeasureItem::clear_value() {
  value_ = 0;
}
inline float MeasureItem::value() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.value)
  return value_;
}
inline void MeasureItem::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.value)
}

// uint32 edit_time = 6;
inline void MeasureItem::clear_edit_time() {
  edit_time_ = 0u;
}
inline ::google::protobuf::uint32 MeasureItem::edit_time() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.edit_time)
  return edit_time_;
}
inline void MeasureItem::set_edit_time(::google::protobuf::uint32 value) {
  
  edit_time_ = value;
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.edit_time)
}

// repeated .yzm.Vector3 point_list = 7;
inline int MeasureItem::point_list_size() const {
  return point_list_.size();
}
inline void MeasureItem::clear_point_list() {
  point_list_.Clear();
}
inline const ::yzm::Vector3& MeasureItem::point_list(int index) const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.point_list)
  return point_list_.Get(index);
}
inline ::yzm::Vector3* MeasureItem::mutable_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:yzm.MeasureItem.point_list)
  return point_list_.Mutable(index);
}
inline ::yzm::Vector3* MeasureItem::add_point_list() {
  // @@protoc_insertion_point(field_add:yzm.MeasureItem.point_list)
  return point_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::yzm::Vector3 >*
MeasureItem::mutable_point_list() {
  // @@protoc_insertion_point(field_mutable_list:yzm.MeasureItem.point_list)
  return &point_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::yzm::Vector3 >&
MeasureItem::point_list() const {
  // @@protoc_insertion_point(field_list:yzm.MeasureItem.point_list)
  return point_list_;
}

// bytes dom_extension = 8;
inline void MeasureItem::clear_dom_extension() {
  dom_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MeasureItem::dom_extension() const {
  // @@protoc_insertion_point(field_get:yzm.MeasureItem.dom_extension)
  return dom_extension_.GetNoArena();
}
inline void MeasureItem::set_dom_extension(const ::std::string& value) {
  
  dom_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.MeasureItem.dom_extension)
}
#if LANG_CXX11
inline void MeasureItem::set_dom_extension(::std::string&& value) {
  
  dom_extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.MeasureItem.dom_extension)
}
#endif
inline void MeasureItem::set_dom_extension(const char* value) {
  
  dom_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.MeasureItem.dom_extension)
}
inline void MeasureItem::set_dom_extension(const void* value, size_t size) {
  
  dom_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.MeasureItem.dom_extension)
}
inline ::std::string* MeasureItem::mutable_dom_extension() {
  
  // @@protoc_insertion_point(field_mutable:yzm.MeasureItem.dom_extension)
  return dom_extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MeasureItem::release_dom_extension() {
  // @@protoc_insertion_point(field_release:yzm.MeasureItem.dom_extension)
  
  return dom_extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MeasureItem::set_allocated_dom_extension(::std::string* dom_extension) {
  if (dom_extension != NULL) {
    
  } else {
    
  }
  dom_extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dom_extension);
  // @@protoc_insertion_point(field_set_allocated:yzm.MeasureItem.dom_extension)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace yzm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::yzm::MeasureItem_EAutoMeasureType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yzm::MeasureItem_EAutoMeasureType>() {
  return ::yzm::MeasureItem_EAutoMeasureType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_YZMMeasureItem_2eproto__INCLUDED
