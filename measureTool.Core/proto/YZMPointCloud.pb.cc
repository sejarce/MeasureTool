// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YZMPointCloud.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "YZMPointCloud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yzm {
class VertexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vertex> {
} _Vertex_default_instance_;
class PointCloudDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointCloud> {
} _PointCloud_default_instance_;

namespace protobuf_YZMPointCloud_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, row_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, col_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, body_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, sensor_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, point_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, point_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, device_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, guid_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Vertex)},
  { 14, -1, sizeof(PointCloud)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vertex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PointCloud_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "YZMPointCloud.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Vertex_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PointCloud_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Vertex_default_instance_.DefaultConstruct();
  _PointCloud_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023YZMPointCloud.proto\022\003yzm\"\220\002\n\006Vertex\022\t\n"
      "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001r\030\004 \001("
      "\002\022\t\n\001g\030\005 \001(\002\022\t\n\001b\030\006 \001(\002\022\016\n\006row_id\030\007 \001(\005\022"
      "\016\n\006col_id\030\010 \001(\005\022(\n\tbody_type\030\t \001(\0162\025.yzm"
      ".Vertex.EBodyType\022\021\n\tsensor_id\030\n \001(\005\"g\n\t"
      "EBodyType\022\010\n\004None\020\000\022\016\n\nLeftHandle\0202\022\017\n\013R"
      "ightHandle\020F\022\013\n\007LeftLeg\020Z\022\014\n\010RightLeg\020n\022"
      "\t\n\004Body\020\202\001\022\t\n\004Head\020\226\001\"\244\001\n\nPointCloud\022,\n\n"
      "point_type\030\001 \001(\0162\030.yzm.PointCloud.EPntTy"
      "pe\022\037\n\npoint_list\030\002 \003(\0132\013.yzm.Vertex\022\021\n\td"
      "evice_id\030\003 \001(\t\022\014\n\004guid\030\004 \001(\t\"&\n\010EPntType"
      "\022\007\n\003OSG\020\000\022\010\n\004Ogre\020\001\022\007\n\003Ply\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "YZMPointCloud.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_YZMPointCloud_2eproto

const ::google::protobuf::EnumDescriptor* Vertex_EBodyType_descriptor() {
  protobuf_YZMPointCloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMPointCloud_2eproto::file_level_enum_descriptors[0];
}
bool Vertex_EBodyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 50:
    case 70:
    case 90:
    case 110:
    case 130:
    case 150:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vertex_EBodyType Vertex::None;
const Vertex_EBodyType Vertex::LeftHandle;
const Vertex_EBodyType Vertex::RightHandle;
const Vertex_EBodyType Vertex::LeftLeg;
const Vertex_EBodyType Vertex::RightLeg;
const Vertex_EBodyType Vertex::Body;
const Vertex_EBodyType Vertex::Head;
const Vertex_EBodyType Vertex::EBodyType_MIN;
const Vertex_EBodyType Vertex::EBodyType_MAX;
const int Vertex::EBodyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PointCloud_EPntType_descriptor() {
  protobuf_YZMPointCloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMPointCloud_2eproto::file_level_enum_descriptors[1];
}
bool PointCloud_EPntType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PointCloud_EPntType PointCloud::OSG;
const PointCloud_EPntType PointCloud::Ogre;
const PointCloud_EPntType PointCloud::Ply;
const PointCloud_EPntType PointCloud::EPntType_MIN;
const PointCloud_EPntType PointCloud::EPntType_MAX;
const int PointCloud::EPntType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vertex::kXFieldNumber;
const int Vertex::kYFieldNumber;
const int Vertex::kZFieldNumber;
const int Vertex::kRFieldNumber;
const int Vertex::kGFieldNumber;
const int Vertex::kBFieldNumber;
const int Vertex::kRowIdFieldNumber;
const int Vertex::kColIdFieldNumber;
const int Vertex::kBodyTypeFieldNumber;
const int Vertex::kSensorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vertex::Vertex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_YZMPointCloud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yzm.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&x_) + sizeof(sensor_id_));
  // @@protoc_insertion_point(copy_constructor:yzm.Vertex)
}

void Vertex::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&x_) + sizeof(sensor_id_));
  _cached_size_ = 0;
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:yzm.Vertex)
  SharedDtor();
}

void Vertex::SharedDtor() {
}

void Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex::descriptor() {
  protobuf_YZMPointCloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMPointCloud_2eproto::file_level_metadata[0].descriptor;
}

const Vertex& Vertex::default_instance() {
  protobuf_YZMPointCloud_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vertex* Vertex::New(::google::protobuf::Arena* arena) const {
  Vertex* n = new Vertex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:yzm.Vertex)
  ::memset(&x_, 0, reinterpret_cast<char*>(&sensor_id_) -
    reinterpret_cast<char*>(&x_) + sizeof(sensor_id_));
}

bool Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yzm.Vertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float r = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float g = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 row_id = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 col_id = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .yzm.Vertex.EBodyType body_type = 9;
      case 9: {
        if (tag == 72u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_body_type(static_cast< ::yzm::Vertex_EBodyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sensor_id = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yzm.Vertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yzm.Vertex)
  return false;
#undef DO_
}

void Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yzm.Vertex)
  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float r = 4;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->r(), output);
  }

  // float g = 5;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->g(), output);
  }

  // float b = 6;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->b(), output);
  }

  // int32 row_id = 7;
  if (this->row_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->row_id(), output);
  }

  // int32 col_id = 8;
  if (this->col_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->col_id(), output);
  }

  // .yzm.Vertex.EBodyType body_type = 9;
  if (this->body_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->body_type(), output);
  }

  // int32 sensor_id = 10;
  if (this->sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sensor_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yzm.Vertex)
}

::google::protobuf::uint8* Vertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yzm.Vertex)
  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float r = 4;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->r(), target);
  }

  // float g = 5;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->g(), target);
  }

  // float b = 6;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->b(), target);
  }

  // int32 row_id = 7;
  if (this->row_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->row_id(), target);
  }

  // int32 col_id = 8;
  if (this->col_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->col_id(), target);
  }

  // .yzm.Vertex.EBodyType body_type = 9;
  if (this->body_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->body_type(), target);
  }

  // int32 sensor_id = 10;
  if (this->sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sensor_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yzm.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yzm.Vertex)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float r = 4;
  if (this->r() != 0) {
    total_size += 1 + 4;
  }

  // float g = 5;
  if (this->g() != 0) {
    total_size += 1 + 4;
  }

  // float b = 6;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // int32 row_id = 7;
  if (this->row_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_id());
  }

  // int32 col_id = 8;
  if (this->col_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col_id());
  }

  // .yzm.Vertex.EBodyType body_type = 9;
  if (this->body_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->body_type());
  }

  // int32 sensor_id = 10;
  if (this->sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensor_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yzm.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  const Vertex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vertex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yzm.Vertex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yzm.Vertex)
    MergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yzm.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.row_id() != 0) {
    set_row_id(from.row_id());
  }
  if (from.col_id() != 0) {
    set_col_id(from.col_id());
  }
  if (from.body_type() != 0) {
    set_body_type(from.body_type());
  }
  if (from.sensor_id() != 0) {
    set_sensor_id(from.sensor_id());
  }
}

void Vertex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yzm.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yzm.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::Swap(Vertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vertex::InternalSwap(Vertex* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(row_id_, other->row_id_);
  std::swap(col_id_, other->col_id_);
  std::swap(body_type_, other->body_type_);
  std::swap(sensor_id_, other->sensor_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vertex::GetMetadata() const {
  protobuf_YZMPointCloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMPointCloud_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vertex

// float x = 1;
void Vertex::clear_x() {
  x_ = 0;
}
float Vertex::x() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.x)
  return x_;
}
void Vertex::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.x)
}

// float y = 2;
void Vertex::clear_y() {
  y_ = 0;
}
float Vertex::y() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.y)
  return y_;
}
void Vertex::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.y)
}

// float z = 3;
void Vertex::clear_z() {
  z_ = 0;
}
float Vertex::z() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.z)
  return z_;
}
void Vertex::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.z)
}

// float r = 4;
void Vertex::clear_r() {
  r_ = 0;
}
float Vertex::r() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.r)
  return r_;
}
void Vertex::set_r(float value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.r)
}

// float g = 5;
void Vertex::clear_g() {
  g_ = 0;
}
float Vertex::g() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.g)
  return g_;
}
void Vertex::set_g(float value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.g)
}

// float b = 6;
void Vertex::clear_b() {
  b_ = 0;
}
float Vertex::b() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.b)
  return b_;
}
void Vertex::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.b)
}

// int32 row_id = 7;
void Vertex::clear_row_id() {
  row_id_ = 0;
}
::google::protobuf::int32 Vertex::row_id() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.row_id)
  return row_id_;
}
void Vertex::set_row_id(::google::protobuf::int32 value) {
  
  row_id_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.row_id)
}

// int32 col_id = 8;
void Vertex::clear_col_id() {
  col_id_ = 0;
}
::google::protobuf::int32 Vertex::col_id() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.col_id)
  return col_id_;
}
void Vertex::set_col_id(::google::protobuf::int32 value) {
  
  col_id_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.col_id)
}

// .yzm.Vertex.EBodyType body_type = 9;
void Vertex::clear_body_type() {
  body_type_ = 0;
}
::yzm::Vertex_EBodyType Vertex::body_type() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.body_type)
  return static_cast< ::yzm::Vertex_EBodyType >(body_type_);
}
void Vertex::set_body_type(::yzm::Vertex_EBodyType value) {
  
  body_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.body_type)
}

// int32 sensor_id = 10;
void Vertex::clear_sensor_id() {
  sensor_id_ = 0;
}
::google::protobuf::int32 Vertex::sensor_id() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.sensor_id)
  return sensor_id_;
}
void Vertex::set_sensor_id(::google::protobuf::int32 value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.sensor_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kPointTypeFieldNumber;
const int PointCloud::kPointListFieldNumber;
const int PointCloud::kDeviceIdFieldNumber;
const int PointCloud::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_YZMPointCloud_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:yzm.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      point_list_(from.point_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_id().size() > 0) {
    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guid().size() > 0) {
    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  point_type_ = from.point_type_;
  // @@protoc_insertion_point(copy_constructor:yzm.PointCloud)
}

void PointCloud::SharedCtor() {
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_type_ = 0;
  _cached_size_ = 0;
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:yzm.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_YZMPointCloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMPointCloud_2eproto::file_level_metadata[1].descriptor;
}

const PointCloud& PointCloud::default_instance() {
  protobuf_YZMPointCloud_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointCloud* PointCloud::New(::google::protobuf::Arena* arena) const {
  PointCloud* n = new PointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:yzm.PointCloud)
  point_list_.Clear();
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_type_ = 0;
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yzm.PointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .yzm.PointCloud.EPntType point_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_point_type(static_cast< ::yzm::PointCloud_EPntType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .yzm.Vertex point_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point_list()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string device_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_id().data(), this->device_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yzm.PointCloud.device_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guid = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yzm.PointCloud.guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yzm.PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yzm.PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yzm.PointCloud)
  // .yzm.PointCloud.EPntType point_type = 1;
  if (this->point_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->point_type(), output);
  }

  // repeated .yzm.Vertex point_list = 2;
  for (unsigned int i = 0, n = this->point_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point_list(i), output);
  }

  // string device_id = 3;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yzm.PointCloud.device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_id(), output);
  }

  // string guid = 4;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yzm.PointCloud.guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guid(), output);
  }

  // @@protoc_insertion_point(serialize_end:yzm.PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:yzm.PointCloud)
  // .yzm.PointCloud.EPntType point_type = 1;
  if (this->point_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->point_type(), target);
  }

  // repeated .yzm.Vertex point_list = 2;
  for (unsigned int i = 0, n = this->point_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->point_list(i), false, target);
  }

  // string device_id = 3;
  if (this->device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_id().data(), this->device_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yzm.PointCloud.device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_id(), target);
  }

  // string guid = 4;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yzm.PointCloud.guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yzm.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yzm.PointCloud)
  size_t total_size = 0;

  // repeated .yzm.Vertex point_list = 2;
  {
    unsigned int count = this->point_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_list(i));
    }
  }

  // string device_id = 3;
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_id());
  }

  // string guid = 4;
  if (this->guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guid());
  }

  // .yzm.PointCloud.EPntType point_type = 1;
  if (this->point_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->point_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:yzm.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const PointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:yzm.PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:yzm.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yzm.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  point_list_.MergeFrom(from.point_list_);
  if (from.device_id().size() > 0) {

    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  if (from.guid().size() > 0) {

    guid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  if (from.point_type() != 0) {
    set_point_type(from.point_type());
  }
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:yzm.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yzm.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  point_list_.UnsafeArenaSwap(&other->point_list_);
  device_id_.Swap(&other->device_id_);
  guid_.Swap(&other->guid_);
  std::swap(point_type_, other->point_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_YZMPointCloud_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_YZMPointCloud_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloud

// .yzm.PointCloud.EPntType point_type = 1;
void PointCloud::clear_point_type() {
  point_type_ = 0;
}
::yzm::PointCloud_EPntType PointCloud::point_type() const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.point_type)
  return static_cast< ::yzm::PointCloud_EPntType >(point_type_);
}
void PointCloud::set_point_type(::yzm::PointCloud_EPntType value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.PointCloud.point_type)
}

// repeated .yzm.Vertex point_list = 2;
int PointCloud::point_list_size() const {
  return point_list_.size();
}
void PointCloud::clear_point_list() {
  point_list_.Clear();
}
const ::yzm::Vertex& PointCloud::point_list(int index) const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.point_list)
  return point_list_.Get(index);
}
::yzm::Vertex* PointCloud::mutable_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:yzm.PointCloud.point_list)
  return point_list_.Mutable(index);
}
::yzm::Vertex* PointCloud::add_point_list() {
  // @@protoc_insertion_point(field_add:yzm.PointCloud.point_list)
  return point_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::yzm::Vertex >*
PointCloud::mutable_point_list() {
  // @@protoc_insertion_point(field_mutable_list:yzm.PointCloud.point_list)
  return &point_list_;
}
const ::google::protobuf::RepeatedPtrField< ::yzm::Vertex >&
PointCloud::point_list() const {
  // @@protoc_insertion_point(field_list:yzm.PointCloud.point_list)
  return point_list_;
}

// string device_id = 3;
void PointCloud::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointCloud::device_id() const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.device_id)
  return device_id_.GetNoArena();
}
void PointCloud::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.PointCloud.device_id)
}
#if LANG_CXX11
void PointCloud::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.PointCloud.device_id)
}
#endif
void PointCloud::set_device_id(const char* value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.PointCloud.device_id)
}
void PointCloud::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.PointCloud.device_id)
}
::std::string* PointCloud::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:yzm.PointCloud.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointCloud::release_device_id() {
  // @@protoc_insertion_point(field_release:yzm.PointCloud.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointCloud::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:yzm.PointCloud.device_id)
}

// string guid = 4;
void PointCloud::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointCloud::guid() const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.guid)
  return guid_.GetNoArena();
}
void PointCloud::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.PointCloud.guid)
}
#if LANG_CXX11
void PointCloud::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.PointCloud.guid)
}
#endif
void PointCloud::set_guid(const char* value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.PointCloud.guid)
}
void PointCloud::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.PointCloud.guid)
}
::std::string* PointCloud::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:yzm.PointCloud.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointCloud::release_guid() {
  // @@protoc_insertion_point(field_release:yzm.PointCloud.guid)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointCloud::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:yzm.PointCloud.guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yzm

// @@protoc_insertion_point(global_scope)
