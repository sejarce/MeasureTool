// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YZMPointCloud.proto

#ifndef PROTOBUF_YZMPointCloud_2eproto__INCLUDED
#define PROTOBUF_YZMPointCloud_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace yzm {
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
}  // namespace yzm

namespace yzm {

namespace protobuf_YZMPointCloud_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_YZMPointCloud_2eproto

enum Vertex_EBodyType {
  Vertex_EBodyType_None = 0,
  Vertex_EBodyType_LeftHandle = 50,
  Vertex_EBodyType_RightHandle = 70,
  Vertex_EBodyType_LeftLeg = 90,
  Vertex_EBodyType_RightLeg = 110,
  Vertex_EBodyType_Body = 130,
  Vertex_EBodyType_Head = 150,
  Vertex_EBodyType_Vertex_EBodyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Vertex_EBodyType_Vertex_EBodyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Vertex_EBodyType_IsValid(int value);
const Vertex_EBodyType Vertex_EBodyType_EBodyType_MIN = Vertex_EBodyType_None;
const Vertex_EBodyType Vertex_EBodyType_EBodyType_MAX = Vertex_EBodyType_Head;
const int Vertex_EBodyType_EBodyType_ARRAYSIZE = Vertex_EBodyType_EBodyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Vertex_EBodyType_descriptor();
inline const ::std::string& Vertex_EBodyType_Name(Vertex_EBodyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Vertex_EBodyType_descriptor(), value);
}
inline bool Vertex_EBodyType_Parse(
    const ::std::string& name, Vertex_EBodyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Vertex_EBodyType>(
    Vertex_EBodyType_descriptor(), name, value);
}
enum PointCloud_EPntType {
  PointCloud_EPntType_OSG = 0,
  PointCloud_EPntType_Ogre = 1,
  PointCloud_EPntType_PointCloud_EPntType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PointCloud_EPntType_PointCloud_EPntType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PointCloud_EPntType_IsValid(int value);
const PointCloud_EPntType PointCloud_EPntType_EPntType_MIN = PointCloud_EPntType_OSG;
const PointCloud_EPntType PointCloud_EPntType_EPntType_MAX = PointCloud_EPntType_Ogre;
const int PointCloud_EPntType_EPntType_ARRAYSIZE = PointCloud_EPntType_EPntType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PointCloud_EPntType_descriptor();
inline const ::std::string& PointCloud_EPntType_Name(PointCloud_EPntType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PointCloud_EPntType_descriptor(), value);
}
inline bool PointCloud_EPntType_Parse(
    const ::std::string& name, PointCloud_EPntType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointCloud_EPntType>(
    PointCloud_EPntType_descriptor(), name, value);
}
// ===================================================================

class Vertex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:yzm.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex& default_instance();

  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }

  void Swap(Vertex* other);

  // implements Message ----------------------------------------------

  inline Vertex* New() const PROTOBUF_FINAL { return New(NULL); }

  Vertex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Vertex_EBodyType EBodyType;
  static const EBodyType None =
    Vertex_EBodyType_None;
  static const EBodyType LeftHandle =
    Vertex_EBodyType_LeftHandle;
  static const EBodyType RightHandle =
    Vertex_EBodyType_RightHandle;
  static const EBodyType LeftLeg =
    Vertex_EBodyType_LeftLeg;
  static const EBodyType RightLeg =
    Vertex_EBodyType_RightLeg;
  static const EBodyType Body =
    Vertex_EBodyType_Body;
  static const EBodyType Head =
    Vertex_EBodyType_Head;
  static inline bool EBodyType_IsValid(int value) {
    return Vertex_EBodyType_IsValid(value);
  }
  static const EBodyType EBodyType_MIN =
    Vertex_EBodyType_EBodyType_MIN;
  static const EBodyType EBodyType_MAX =
    Vertex_EBodyType_EBodyType_MAX;
  static const int EBodyType_ARRAYSIZE =
    Vertex_EBodyType_EBodyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EBodyType_descriptor() {
    return Vertex_EBodyType_descriptor();
  }
  static inline const ::std::string& EBodyType_Name(EBodyType value) {
    return Vertex_EBodyType_Name(value);
  }
  static inline bool EBodyType_Parse(const ::std::string& name,
      EBodyType* value) {
    return Vertex_EBodyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float r = 4;
  void clear_r();
  static const int kRFieldNumber = 4;
  float r() const;
  void set_r(float value);

  // float g = 5;
  void clear_g();
  static const int kGFieldNumber = 5;
  float g() const;
  void set_g(float value);

  // float b = 6;
  void clear_b();
  static const int kBFieldNumber = 6;
  float b() const;
  void set_b(float value);

  // int32 row_id = 7;
  void clear_row_id();
  static const int kRowIdFieldNumber = 7;
  ::google::protobuf::int32 row_id() const;
  void set_row_id(::google::protobuf::int32 value);

  // int32 col_id = 8;
  void clear_col_id();
  static const int kColIdFieldNumber = 8;
  ::google::protobuf::int32 col_id() const;
  void set_col_id(::google::protobuf::int32 value);

  // .yzm.Vertex.EBodyType body_type = 9;
  void clear_body_type();
  static const int kBodyTypeFieldNumber = 9;
  ::yzm::Vertex_EBodyType body_type() const;
  void set_body_type(::yzm::Vertex_EBodyType value);

  // int32 sensor_id = 10;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 10;
  ::google::protobuf::int32 sensor_id() const;
  void set_sensor_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:yzm.Vertex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float r_;
  float g_;
  float b_;
  ::google::protobuf::int32 row_id_;
  ::google::protobuf::int32 col_id_;
  int body_type_;
  ::google::protobuf::int32 sensor_id_;
  mutable int _cached_size_;
  friend struct  protobuf_YZMPointCloud_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointCloud : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:yzm.PointCloud) */ {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloud& default_instance();

  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }

  void Swap(PointCloud* other);

  // implements Message ----------------------------------------------

  inline PointCloud* New() const PROTOBUF_FINAL { return New(NULL); }

  PointCloud* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PointCloud* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PointCloud_EPntType EPntType;
  static const EPntType OSG =
    PointCloud_EPntType_OSG;
  static const EPntType Ogre =
    PointCloud_EPntType_Ogre;
  static inline bool EPntType_IsValid(int value) {
    return PointCloud_EPntType_IsValid(value);
  }
  static const EPntType EPntType_MIN =
    PointCloud_EPntType_EPntType_MIN;
  static const EPntType EPntType_MAX =
    PointCloud_EPntType_EPntType_MAX;
  static const int EPntType_ARRAYSIZE =
    PointCloud_EPntType_EPntType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EPntType_descriptor() {
    return PointCloud_EPntType_descriptor();
  }
  static inline const ::std::string& EPntType_Name(EPntType value) {
    return PointCloud_EPntType_Name(value);
  }
  static inline bool EPntType_Parse(const ::std::string& name,
      EPntType* value) {
    return PointCloud_EPntType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .yzm.Vertex point_list = 2;
  int point_list_size() const;
  void clear_point_list();
  static const int kPointListFieldNumber = 2;
  const ::yzm::Vertex& point_list(int index) const;
  ::yzm::Vertex* mutable_point_list(int index);
  ::yzm::Vertex* add_point_list();
  ::google::protobuf::RepeatedPtrField< ::yzm::Vertex >*
      mutable_point_list();
  const ::google::protobuf::RepeatedPtrField< ::yzm::Vertex >&
      point_list() const;

  // string device_id = 3;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_id(::std::string&& value);
  #endif
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // string guid = 4;
  void clear_guid();
  static const int kGuidFieldNumber = 4;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // .yzm.PointCloud.EPntType point_type = 1;
  void clear_point_type();
  static const int kPointTypeFieldNumber = 1;
  ::yzm::PointCloud_EPntType point_type() const;
  void set_point_type(::yzm::PointCloud_EPntType value);

  // @@protoc_insertion_point(class_scope:yzm.PointCloud)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::yzm::Vertex > point_list_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  int point_type_;
  mutable int _cached_size_;
  friend struct  protobuf_YZMPointCloud_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vertex

// float x = 1;
inline void Vertex::clear_x() {
  x_ = 0;
}
inline float Vertex::x() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.x)
  return x_;
}
inline void Vertex::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.x)
}

// float y = 2;
inline void Vertex::clear_y() {
  y_ = 0;
}
inline float Vertex::y() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.y)
  return y_;
}
inline void Vertex::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.y)
}

// float z = 3;
inline void Vertex::clear_z() {
  z_ = 0;
}
inline float Vertex::z() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.z)
  return z_;
}
inline void Vertex::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.z)
}

// float r = 4;
inline void Vertex::clear_r() {
  r_ = 0;
}
inline float Vertex::r() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.r)
  return r_;
}
inline void Vertex::set_r(float value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.r)
}

// float g = 5;
inline void Vertex::clear_g() {
  g_ = 0;
}
inline float Vertex::g() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.g)
  return g_;
}
inline void Vertex::set_g(float value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.g)
}

// float b = 6;
inline void Vertex::clear_b() {
  b_ = 0;
}
inline float Vertex::b() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.b)
  return b_;
}
inline void Vertex::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.b)
}

// int32 row_id = 7;
inline void Vertex::clear_row_id() {
  row_id_ = 0;
}
inline ::google::protobuf::int32 Vertex::row_id() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.row_id)
  return row_id_;
}
inline void Vertex::set_row_id(::google::protobuf::int32 value) {
  
  row_id_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.row_id)
}

// int32 col_id = 8;
inline void Vertex::clear_col_id() {
  col_id_ = 0;
}
inline ::google::protobuf::int32 Vertex::col_id() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.col_id)
  return col_id_;
}
inline void Vertex::set_col_id(::google::protobuf::int32 value) {
  
  col_id_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.col_id)
}

// .yzm.Vertex.EBodyType body_type = 9;
inline void Vertex::clear_body_type() {
  body_type_ = 0;
}
inline ::yzm::Vertex_EBodyType Vertex::body_type() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.body_type)
  return static_cast< ::yzm::Vertex_EBodyType >(body_type_);
}
inline void Vertex::set_body_type(::yzm::Vertex_EBodyType value) {
  
  body_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.body_type)
}

// int32 sensor_id = 10;
inline void Vertex::clear_sensor_id() {
  sensor_id_ = 0;
}
inline ::google::protobuf::int32 Vertex::sensor_id() const {
  // @@protoc_insertion_point(field_get:yzm.Vertex.sensor_id)
  return sensor_id_;
}
inline void Vertex::set_sensor_id(::google::protobuf::int32 value) {
  
  sensor_id_ = value;
  // @@protoc_insertion_point(field_set:yzm.Vertex.sensor_id)
}

// -------------------------------------------------------------------

// PointCloud

// .yzm.PointCloud.EPntType point_type = 1;
inline void PointCloud::clear_point_type() {
  point_type_ = 0;
}
inline ::yzm::PointCloud_EPntType PointCloud::point_type() const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.point_type)
  return static_cast< ::yzm::PointCloud_EPntType >(point_type_);
}
inline void PointCloud::set_point_type(::yzm::PointCloud_EPntType value) {
  
  point_type_ = value;
  // @@protoc_insertion_point(field_set:yzm.PointCloud.point_type)
}

// repeated .yzm.Vertex point_list = 2;
inline int PointCloud::point_list_size() const {
  return point_list_.size();
}
inline void PointCloud::clear_point_list() {
  point_list_.Clear();
}
inline const ::yzm::Vertex& PointCloud::point_list(int index) const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.point_list)
  return point_list_.Get(index);
}
inline ::yzm::Vertex* PointCloud::mutable_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:yzm.PointCloud.point_list)
  return point_list_.Mutable(index);
}
inline ::yzm::Vertex* PointCloud::add_point_list() {
  // @@protoc_insertion_point(field_add:yzm.PointCloud.point_list)
  return point_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::yzm::Vertex >*
PointCloud::mutable_point_list() {
  // @@protoc_insertion_point(field_mutable_list:yzm.PointCloud.point_list)
  return &point_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::yzm::Vertex >&
PointCloud::point_list() const {
  // @@protoc_insertion_point(field_list:yzm.PointCloud.point_list)
  return point_list_;
}

// string device_id = 3;
inline void PointCloud::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PointCloud::device_id() const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.device_id)
  return device_id_.GetNoArena();
}
inline void PointCloud::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.PointCloud.device_id)
}
#if LANG_CXX11
inline void PointCloud::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.PointCloud.device_id)
}
#endif
inline void PointCloud::set_device_id(const char* value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.PointCloud.device_id)
}
inline void PointCloud::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.PointCloud.device_id)
}
inline ::std::string* PointCloud::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:yzm.PointCloud.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PointCloud::release_device_id() {
  // @@protoc_insertion_point(field_release:yzm.PointCloud.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PointCloud::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:yzm.PointCloud.device_id)
}

// string guid = 4;
inline void PointCloud::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PointCloud::guid() const {
  // @@protoc_insertion_point(field_get:yzm.PointCloud.guid)
  return guid_.GetNoArena();
}
inline void PointCloud::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yzm.PointCloud.guid)
}
#if LANG_CXX11
inline void PointCloud::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yzm.PointCloud.guid)
}
#endif
inline void PointCloud::set_guid(const char* value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yzm.PointCloud.guid)
}
inline void PointCloud::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yzm.PointCloud.guid)
}
inline ::std::string* PointCloud::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:yzm.PointCloud.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PointCloud::release_guid() {
  // @@protoc_insertion_point(field_release:yzm.PointCloud.guid)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PointCloud::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:yzm.PointCloud.guid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace yzm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::yzm::Vertex_EBodyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yzm::Vertex_EBodyType>() {
  return ::yzm::Vertex_EBodyType_descriptor();
}
template <> struct is_proto_enum< ::yzm::PointCloud_EPntType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yzm::PointCloud_EPntType>() {
  return ::yzm::PointCloud_EPntType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_YZMPointCloud_2eproto__INCLUDED
